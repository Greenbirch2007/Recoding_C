https://www.w3cschool.cn/cpp/


C++的语言特点

１．支持数据封装和数据隐藏
２．支持继承和重用
３．支持多态性


Ｃ++工作原理

C++语言的程序因为要体现高性能，所以都是编译型的。但是其开发环境，
为了便于测试，将调试环境做成解释型的。
即开发过程中，以解释型的逐条语句执行方式来进行调试，
以编译型的脱离开发环境来启动运行的方式来生成程序最终的执行代码

Ｃ++基本语法
对象，类，方法，即时变量

c++中的分号　＆块

在c++中，分号是语句结束符、每个语句必须以分号结束。它表明一个逻辑实体的结束

x = y;
y=y+1;
add(x,y);
块是一组使用大括号括起来的按逻辑连接的语句

c++标识符

c++标识符是用来标识变量，函数，类，模块，或任何其他用户自定义项目的
名称。

C++ 关键字

三字符序列可以出现在任何地方，包括字符串，字符序列，注释和预处理指令

c++中空格

c++注释
c++数据类型

typeof声明

可以使用typedeff为一个已有的类型取一个新的名字。

typedef type newname;

typedef int feet;

枚举类型

枚举类型声明一个可选的类型名称和一组标识符，用来作为该类型的值。
其带有零个或多个标识符可以被用来作为该类型的值。
每个枚举数是一个枚举类型的常数

创建枚举，需要使用关键字enum.　枚举类型的一般形式为：

enum enum-name { list of names } var-list;


enum color { red,green,blue} c;
c= blue;


c++变量类型

c++允许定义其他类型的变量，比如枚举，指针，数组，引用，数据结构
，类等

c++中的变量定义
变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。
变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表

type variable_list;

在这里，type必须是一个有效的c++数据乐行，variable_list可以由一个或
多个标识符名称组成，多个标识符之间用逗号分隔。

变量可以在声明的时候被初始化（指定一个初始值）。
初始化由一个等号，后跟一个常量表达式组成


type variable_name = value;

extern int d = 3, f = 5;
int d = 3, f = 5;
byte z = 22;
char x = "x";

不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为NULL(所有字节
的值都是０)，其他所有变量的初始值是未定义的


C++中的变量声明


变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量
完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，
在程序连接时编译器需要实际的变量声明。

在函数声明时，提供一个函数名，而函数的实际定义则可以在任何地方进行

// 函数声明

int func();

int main()
{
    //　函数调用
    int i = func();
}
// 函数定义

int func()
{
    return 0;
}

c++中的左值(Lvalues)和右值(Rvalues)
左值：指向内存位置的表达式被称为左值(lvalue)表达式。
左值可以出现在赋值号的左边或右边

右值：指的是存储在内存中某些地址的数值。

c++变量作用域

作用域是程序的一个区域，一般来说有三个地方可以声明变量：
１．在函数或一个代码块内部声明的变量，称为局部变量
２．在函数参数的定义中声明的变量，称为形式参数
３．在所有函数外部声明的变量，称为全局变量

局部变量只能被函数内部或代码块内部的语句使用


#include <iostream>
using namspace std;

int main();
{
    //局部变量声明
    int a,b;
    int c;


    // 实际初始化
    a = 10;
    b = 20;
    c = a + b;

    cout << c;  return 0;
}

全局变量


在所有函数外部定义的变量（通常是在程序的头部），称为全局变量。
全局变量的值在程序的整个生命周期内都是有效的。
全局变量可以被任何函数访问。全局变量一旦声明，在整个程序中都是可用的。

在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量
的值会覆盖全局变量的值

初始化局部变量和全局变量
当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动初始化为下列值：

C++ 常量





