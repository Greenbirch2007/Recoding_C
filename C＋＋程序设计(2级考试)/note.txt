
1.2

c++是一种面向对象的程序设计语言

抽象数据类型
封装和信息隐藏
以继承和派生方式实现程序的重用
以运算符重载和虚函数实现多态
以模板来实现类型的参数化



c++是c的超集


1.c++继承了c语言简明，高校，灵活等优点
2.以前使用c语言编写的大批软件可以不加任何修改，直接在c++开发环境下维护
3.c语言程序员只需要学习c++扩充的新特性，就可以使用c++编写程序

c++的特性

1.封装性

封装性是指将数据和算法捆绑成一个整体，这个整体就是对象，描述对象的数据被封装在内部。如果需要
 存取数据，可以通过对象提供的算法来进行操作，而无需知道对象内部的数据是如何表示和存储的
类支持封装性和信息隐藏。用户定义的类一旦建立，就可看成是一个完全封装的实体，可以作为一个整体
单元来使用。类的内部数据表示被隐藏起来，类的用户不需要知道类内数据的表示方法，只需要执行类
对外提供的算法，就可以完成某项功能


2.继承性


继承性是指一种事物保留了另一种事物的全部特征，并且具有自身的独有特征

c++语言采用继承来支持重用，程序可以在现有类型的基础上扩展功能来定义新类型。
新类型是从现有类型中派生出来的，称为派生类


3.多态性

多态性是指当多种事物继承自一种事物时，同一种操作在它们之间表现出不同的行为

c++语言中使用函数重载，模板，虚函数等概念来支持多态性


c++的关键字

bool,catch,class,const_cast,delete,dynamic_cast,
explicit,false,friend,inline,mutable,namespace,
new,operator,private,protected,public,
reinterpret_case,static_cast,template,this,throw,true,
try,typeid,typename,using,virtual,wchar_t

标识符是用户为程序中各种需要命名的“元素”所起的名字，这些“元素”包括：
变量，符号，常量，函数，函数的参数，结构，类，对象等

字面常量

常量是指在程序中固定不变的值。常量一般有两种表示形式，即符号常量和字面常量

运算符是对程序中的数据进行操作的一类单词

1.单字符组成的运算符，+ -  * /
2.双字符组成的运算符，   ++  <=  && *=  ->
3.三个字符组成的运算符， <<=   >>=
4.关键字运算符  new delete sizeof


标点符号是在程序中起分割内容和界定范围作用的一类单词

(空格)：语句中个成分之间的分隔符
;(分号)：语句的结束符
'(单引号)：字符常量的起止标记符
"(双引号)：字符串常量的起止标记符
#(井字号)：预处理命令的开始标记符
{(左花括号)：复合语句的开始标记符
}(右花括号)：复合语句的结束标记符
//(双斜杠)：行注释的开始标记符
/*(斜杠和星号):块注释的开始标记符
*/(星号和斜杠)：块注释的结束标记符


#include <iostream>  

这是一条预处理命令。c++中每一个以符号"#"开头的行都是预处理命令。使用预处理命令可以更好地
进行程序的组织。
#include <iostream>的作用是将头文件iostream的内容加入到程序中。iostream是
一个C++标准头文件，其中定义了一些输入输出流现象

int main() 是函数的声明。主函数是所有c++程序开始执行的入口。
无论主函数处于程序中的什么位置，其中的代码总是最先被执行的。
每个程序都必须有且只有一个主函数，主函数的名称必须是main
main前面的int主函数main将返回一个int 类型的值。int代表整型值，它是c++中的一个基本数据类型

cout是c++中的标准输出流对象，它通常代表计算机的屏幕。
cout在标准头文件iostream中被声明(标识符cout位于std名字空间中，必须用前缀std:进行修饰)
要是用它就必须先包含此文件，

<<是输出操作符，功能是将它右边的内容输出到它左边的指定设备上

return 0 ，它的功能是使用主函数main结束并将整数0返回给运行此程序的操作系统

开发c++程序的过程，分为编辑，编译，连接，运行和调试

.cpp为扩展名的文件(保存c++头文件时应以.h为扩展名)


2. 数据类型


逻辑型，字符型，整型，浮点型，空值型

空值型用关键字void表示，因此又称为void型。
空值型的取值为空。c++中不存在void型的常量或变量
c++规定，所有函数说明都必须指明返回值类型，没有返回值的函数应说明为void类型；
另外，void类型还可以用来声明一个指针变量   void *p

是一条指针变量声明语句，其中指针变量p所指向的数据类型尚不确定


2.1.2  基本类型的派生类型

c++语言中，基本类型的字长及取值范围可以放大和缩小，改变后的类型就叫做基本类型的拍盛行


派生类型声明符由基本类型关键字char,int,float,double签名加上类型修饰符组成

类型修饰符包括

short  短类型，缩短字长
long  长类型，加长字长
signed   有符号类型，取值范围包括正负值
unsigned 无符号类型，取值范围只包括正值



比如  short int 

2.2  常量

常量是指在程序执行过程中值不改变的量。常量有多种表示形式，即字面量和符号常量。

字面常量的类型是根据书写形式来区分的，分别为：整型，浮点型，字符型，字符串型，每个
字面常量的字面本身就是它的值。
符号常量是一个标识符，在程序中必须遵循“先声明，后使用”的原则。

2.2.1 逻辑常量   true  false

2.2.2  字符常量

字符常量简称字符，它是以单引号作为起止符号，中间有一个或若干个字符

转移序列不但可以作为字符常量，也可以同其他字符一样出现在字符串中

一个字符用于显示输出时，将输出字符本身或体现出相应的控制功能；当它在表达式子中参加整数运算时，将
使用它的ASCII码量


2.2.3  整型常量


十进制，八进制，十六进制


2.2.4  实型常量

实型常量简称实数，对应数学中的实数。

实型常量有十进制的定点数和浮点数表示


1. 定点数   .12


2.浮点数表示  3.2E5



2.2.5  枚举常量


枚举常量是枚举类型中定义的值，即枚举值。枚举类型属于用户定义类型，用关键字enum表示，
因此又称为enum类型。

用户通常利用枚举类型定义程序中需要使用的一组相关符号常量


enum color {RED=1,YELLOW,BLUE};

1.一个enum类型实际上是int类型的一个子集，其每一个枚举值代表一个整数
2.枚举类型的声明也可以作为组声明若干整型符号常量的方法
把每一个要声明的符号常量作为一个枚举值，将各个枚举值合在一起定义成一个枚举类型

由于枚举类型属于用于定义数据类型，一旦美剧类型被定义后就可以使用它来定义变量


2.3 变量

变量是程序中用于存储信息的单元，它对应某个内存空间。在定义变量时，需要说明变量
的名字和数据类型。这些信息将告诉编译器要为变量分配多少内存空间，以及变量中要
存储什么类型的值。由于变量名可以代表其存储空间，因此程序能够在变量中存储值和取出值


2.3.1  变量的定义

变量的定义要通过变量声明语句来实现的，变量声明语句为


[存储类]<类型名><变量名><初始表达式>

存储类有四种，分别为auto,register,static,extern, 默认的存储类为auto


类型名为已存在的一种数据类型名称，或用户定义的数据类型名

变量名是用户定义的一个标识符，用来表示一个变量，该变量可以通过后面的可选项赋予一个值，
称为给变量赋初值，也叫作对变量进行初始化。
若变量后不带有初值表达式，则不为变量赋予任何值，此时的变量值不确定


变量名的命名遵循额原则：
1.是一个合法的c++标识符
2.不能是c++关键字


初值表达式：是一个表达式，它的值就是赋予变量的初值


2.3.2  变量的使用方式

1.全局变量和局部变量
全局变量是在所有函数定义，类定义和程序块之外声明的变量。
声明全局变量时如果在程序中不对它进行专门的初始化，该变量会被系统
自动初始化为0。在程序的任何一个函数，类或程序块之内均可以访问全局变量


局部变量是在某个某个函数定义，类定义或程序块之内声明的变量。
局部变量只能在声明它的函数，类或程序块中被访问

程序中的x是全局变量，它在所有函数和程序块之外被声明，但没有进行初始化，
所以系统默认得将其初始化为0.变量y是局部变量，它在main()函数中
被声明，因为只能在该函数中被访问。
声明局部变量y时也没有进行初始化，与全局变量不同的是，系统并不给它
赋默认值，没有初始化的局部变量中保存着一个不确定的值。

2.生存期和作用域


生存期是指从一个变量被声明且分配了内存开始，直到该变量声明语句失败，它
占用的内存空间被释放为止。一个全局变量的生存期从它声明开始，直到程序结束；
一个局部变量的生存期从它被声明开始，知道包含它的最近的一个程序块结束

作用域是指变量名可以代表该变量存储空间的范围


一般情况下，变量的作用域与其生存期一致，但由于c++允许在程序的不同
部分为不同变量取同一个名字，因此一个变量名的作用域可能小于其生存期


3.变量的存储类属性


1.auto变量：用关键字auto声明的局部变量称为自动变量。auto为变量声明
时的默认存储类别，即在变量定义时，如果不显式标明存储类别，则系统自动按
auto变量处理。auto变量所占用存储空间的分配和释放工作将由系统自动完成

2.register变量：用关键字register声明的局部变量称为寄存器变量

register变量可能以寄存器作为其存储空间。
声明寄存器变量时，关键字register的作用只能是建议(而不是强制)
系统使用寄存器，当寄存器不够用时，该变量仍然按自动变量处理

3. static变量：用关键字static声明的变量称为静态变量。任何静态变量的
生存期将延续到整个程序的终止。与全局变量一样，为静态变量分配的存储空间
在整个程序运行过程中不再被释放；如果静态变量未被赋予初值，
系统将自动为其赋予初值0

4.extern变量：用关键字extern声明的变量称为外部变量。变量一旦被声明
为外部变量，系统就不必像一般变量那样为其分配内存，因为该变量已经在
这一局部的外面被定义。
外部变量一般用于多个文件组成的程序中，有些变量在多个文件中被声明，
但却是指同一个变量。标明某一个变量为外部变量可以避免为其重复分配内存


4.typeof 类型说明

使用关键字 typeof可以为已有类型名定义一个新类型名

typeof 已有类型名   新类型名

typeof 只是为某个已有的数据类型起了一个别名。在规模较大的程序中
为了提高代码可读性场采用这种方式

2.3.3 符号常量声明语句





