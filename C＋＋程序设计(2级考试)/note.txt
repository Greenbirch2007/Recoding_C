
1.2

c++是一种面向对象的程序设计语言

抽象数据类型
封装和信息隐藏
以继承和派生方式实现程序的重用
以运算符重载和虚函数实现多态
以模板来实现类型的参数化



c++是c的超集


1.c++继承了c语言简明，高校，灵活等优点
2.以前使用c语言编写的大批软件可以不加任何修改，直接在c++开发环境下维护
3.c语言程序员只需要学习c++扩充的新特性，就可以使用c++编写程序

c++的特性

1.封装性

封装性是指将数据和算法捆绑成一个整体，这个整体就是对象，描述对象的数据被封装在内部。如果需要
 存取数据，可以通过对象提供的算法来进行操作，而无需知道对象内部的数据是如何表示和存储的
类支持封装性和信息隐藏。用户定义的类一旦建立，就可看成是一个完全封装的实体，可以作为一个整体
单元来使用。类的内部数据表示被隐藏起来，类的用户不需要知道类内数据的表示方法，只需要执行类
对外提供的算法，就可以完成某项功能


2.继承性


继承性是指一种事物保留了另一种事物的全部特征，并且具有自身的独有特征

c++语言采用继承来支持重用，程序可以在现有类型的基础上扩展功能来定义新类型。
新类型是从现有类型中派生出来的，称为派生类


3.多态性

多态性是指当多种事物继承自一种事物时，同一种操作在它们之间表现出不同的行为

c++语言中使用函数重载，模板，虚函数等概念来支持多态性


c++的关键字

bool,catch,class,const_cast,delete,dynamic_cast,
explicit,false,friend,inline,mutable,namespace,
new,operator,private,protected,public,
reinterpret_case,static_cast,template,this,throw,true,
try,typeid,typename,using,virtual,wchar_t

标识符是用户为程序中各种需要命名的“元素”所起的名字，这些“元素”包括：
变量，符号，常量，函数，函数的参数，结构，类，对象等

字面常量

常量是指在程序中固定不变的值。常量一般有两种表示形式，即符号常量和字面常量

运算符是对程序中的数据进行操作的一类单词

1.单字符组成的运算符，+ -  * /
2.双字符组成的运算符，   ++  <=  && *=  ->
3.三个字符组成的运算符， <<=   >>=
4.关键字运算符  new delete sizeof


标点符号是在程序中起分割内容和界定范围作用的一类单词

(空格)：语句中个成分之间的分隔符
;(分号)：语句的结束符
'(单引号)：字符常量的起止标记符
"(双引号)：字符串常量的起止标记符
#(井字号)：预处理命令的开始标记符
{(左花括号)：复合语句的开始标记符
}(右花括号)：复合语句的结束标记符
//(双斜杠)：行注释的开始标记符
/*(斜杠和星号):块注释的开始标记符
*/(星号和斜杠)：块注释的结束标记符


#include <iostream>  

这是一条预处理命令。c++中每一个以符号"#"开头的行都是预处理命令。使用预处理命令可以更好地
进行程序的组织。
#include <iostream>的作用是将头文件iostream的内容加入到程序中。iostream是
一个C++标准头文件，其中定义了一些输入输出流现象

int main() 是函数的声明。主函数是所有c++程序开始执行的入口。
无论主函数处于程序中的什么位置，其中的代码总是最先被执行的。
每个程序都必须有且只有一个主函数，主函数的名称必须是main
main前面的int主函数main将返回一个int 类型的值。int代表整型值，它是c++中的一个基本数据类型

cout是c++中的标准输出流对象，它通常代表计算机的屏幕。
cout在标准头文件iostream中被声明(标识符cout位于std名字空间中，必须用前缀std:进行修饰)
要是用它就必须先包含此文件，

<<是输出操作符，功能是将它右边的内容输出到它左边的指定设备上

return 0 ，它的功能是使用主函数main结束并将整数0返回给运行此程序的操作系统

开发c++程序的过程，分为编辑，编译，连接，运行和调试

.cpp为扩展名的文件(保存c++头文件时应以.h为扩展名)


2. 数据类型


逻辑型，字符型，整型，浮点型，空值型

空值型用关键字void表示，因此又称为void型。
空值型的取值为空。c++中不存在void型的常量或变量
c++规定，所有函数说明都必须指明返回值类型，没有返回值的函数应说明为void类型；
另外，void类型还可以用来声明一个指针变量   void *p

是一条指针变量声明语句，其中指针变量p所指向的数据类型尚不确定


2.1.2  基本类型的派生类型

c++语言中，基本类型的字长及取值范围可以放大和缩小，改变后的类型就叫做基本类型的拍盛行


派生类型声明符由基本类型关键字char,int,float,double签名加上类型修饰符组成

类型修饰符包括

short  短类型，缩短字长
long  长类型，加长字长
signed   有符号类型，取值范围包括正负值
unsigned 无符号类型，取值范围只包括正值



比如  short int 

2.2  常量

常量是指在程序执行过程中值不改变的量。常量有多种表示形式，即字面量和符号常量。

字面常量的类型是根据书写形式来区分的，分别为：整型，浮点型，字符型，字符串型，每个
字面常量的字面本身就是它的值。
符号常量是一个标识符，在程序中必须遵循“先声明，后使用”的原则。

2.2.1 逻辑常量   true  false

2.2.2  字符常量

字符常量简称字符，它是以单引号作为起止符号，中间有一个或若干个字符

转移序列不但可以作为字符常量，也可以同其他字符一样出现在字符串中

一个字符用于显示输出时，将输出字符本身或体现出相应的控制功能；当它在表达式子中参加整数运算时，将
使用它的ASCII码量


2.2.3  整型常量


十进制，八进制，十六进制


2.2.4  实型常量

实型常量简称实数，对应数学中的实数。

实型常量有十进制的定点数和浮点数表示


1. 定点数   .12


2.浮点数表示  3.2E5



2.2.5  枚举常量


枚举常量是枚举类型中定义的值，即枚举值。枚举类型属于用户定义类型，用关键字enum表示，
因此又称为enum类型。

用户通常利用枚举类型定义程序中需要使用的一组相关符号常量


enum color {RED=1,YELLOW,BLUE};

1.一个enum类型实际上是int类型的一个子集，其每一个枚举值代表一个整数
2.枚举类型的声明也可以作为组声明若干整型符号常量的方法
把每一个要声明的符号常量作为一个枚举值，将各个枚举值合在一起定义成一个枚举类型

由于枚举类型属于用于定义数据类型，一旦美剧类型被定义后就可以使用它来定义变量


2.3 变量

变量是程序中用于存储信息的单元，它对应某个内存空间。在定义变量时，需要说明变量
的名字和数据类型。这些信息将告诉编译器要为变量分配多少内存空间，以及变量中要
存储什么类型的值。由于变量名可以代表其存储空间，因此程序能够在变量中存储值和取出值


2.3.1  变量的定义

变量的定义要通过变量声明语句来实现的，变量声明语句为


[存储类]<类型名><变量名><初始表达式>

存储类有四种，分别为auto,register,static,extern, 默认的存储类为auto


类型名为已存在的一种数据类型名称，或用户定义的数据类型名

变量名是用户定义的一个标识符，用来表示一个变量，该变量可以通过后面的可选项赋予一个值，
称为给变量赋初值，也叫作对变量进行初始化。
若变量后不带有初值表达式，则不为变量赋予任何值，此时的变量值不确定


变量名的命名遵循额原则：
1.是一个合法的c++标识符
2.不能是c++关键字


初值表达式：是一个表达式，它的值就是赋予变量的初值


2.3.2  变量的使用方式

1.全局变量和局部变量
全局变量是在所有函数定义，类定义和程序块之外声明的变量。
声明全局变量时如果在程序中不对它进行专门的初始化，该变量会被系统
自动初始化为0。在程序的任何一个函数，类或程序块之内均可以访问全局变量


局部变量是在某个某个函数定义，类定义或程序块之内声明的变量。
局部变量只能在声明它的函数，类或程序块中被访问

程序中的x是全局变量，它在所有函数和程序块之外被声明，但没有进行初始化，
所以系统默认得将其初始化为0.变量y是局部变量，它在main()函数中
被声明，因为只能在该函数中被访问。
声明局部变量y时也没有进行初始化，与全局变量不同的是，系统并不给它
赋默认值，没有初始化的局部变量中保存着一个不确定的值。

2.生存期和作用域


生存期是指从一个变量被声明且分配了内存开始，直到该变量声明语句失败，它
占用的内存空间被释放为止。一个全局变量的生存期从它声明开始，直到程序结束；
一个局部变量的生存期从它被声明开始，知道包含它的最近的一个程序块结束

作用域是指变量名可以代表该变量存储空间的范围


一般情况下，变量的作用域与其生存期一致，但由于c++允许在程序的不同
部分为不同变量取同一个名字，因此一个变量名的作用域可能小于其生存期


3.变量的存储类属性


1.auto变量：用关键字auto声明的局部变量称为自动变量。auto为变量声明
时的默认存储类别，即在变量定义时，如果不显式标明存储类别，则系统自动按
auto变量处理。auto变量所占用存储空间的分配和释放工作将由系统自动完成

2.register变量：用关键字register声明的局部变量称为寄存器变量

register变量可能以寄存器作为其存储空间。
声明寄存器变量时，关键字register的作用只能是建议(而不是强制)
系统使用寄存器，当寄存器不够用时，该变量仍然按自动变量处理

3. static变量：用关键字static声明的变量称为静态变量。任何静态变量的
生存期将延续到整个程序的终止。与全局变量一样，为静态变量分配的存储空间
在整个程序运行过程中不再被释放；如果静态变量未被赋予初值，
系统将自动为其赋予初值0

4.extern变量：用关键字extern声明的变量称为外部变量。变量一旦被声明
为外部变量，系统就不必像一般变量那样为其分配内存，因为该变量已经在
这一局部的外面被定义。
外部变量一般用于多个文件组成的程序中，有些变量在多个文件中被声明，
但却是指同一个变量。标明某一个变量为外部变量可以避免为其重复分配内存


4.typeof 类型说明

使用关键字 typeof可以为已有类型名定义一个新类型名

typeof 已有类型名   新类型名

typeof 只是为某个已有的数据类型起了一个别名。在规模较大的程序中
为了提高代码可读性场采用这种方式

2.3.3 符号常量声明语句





符号常量在使用之前必须先进行定义。符号常量定义语句同变量定义语句类似，其语法格式

const <类型名><符号常量名>=<初值表达式>

其中，关键字const指明这是一条符号常量定义语句，后面跟着符号常量的类型名，接着
是符号常量名，它是一个用户定义的标识符，符号常量名之后为一个赋值和一个初值表达式。
必须在声明符号常量的同事为其显示赋初值。该语句也可以定义多个符号常量

系统执行符号常量定义语句时，需要依次为每个符号常量分配存储单元并赋初值。
一个符号常量定义后，它的值就是定义时所赋予的初值，作为常量，这个值以后
将始终保持不变，因为系统只允许读取它的值，而不允许再次向它赋值。
另外，在符号常量定义语句中，若<类型名>为int,则int可以胜利


c++关键字中的true和false就是系统预先定义的两个符号常量，它们的值分别为1和0

使用符号常量往往可以提高程序的可读性和可维护性。由于符号常量和变量同样要求
系统为其分配内存单元，所以可以把符号常量视为一种不允许赋值改变的或只读不写的变量，
称为const变量


2.4  运算符和表达式


c++语言中的运算符又称为操作符，是用来对数据进行运算的符号，运算中所需要的数据称为操作数或运算分量。由一个或多个操作数于操作符连接而成的有效运算符称为表达式。
表达式还能以运算分量的角色出现在运算中从而组成新的表达式。
任何表达式都有一个运算结果


c++语言中的运算符可以根据其运算分量个数的多少分为单目(或一元)运算符，
双目(或二元)运算符，三目(或三元)运算符3lei
一般情况下，单目运算符位于运算分量之前，例如要对某个变量x取相反数可以表示为-x,
这里的"-"符号就是一个单目运算符，用在x的前面；双目运算符一般位于两个运算分量之间，
例如把两个数a和b相加可以表示为a+b,位于a和b中的"+"号就是双目运算符；三目运算符只有一个，
即为条件运算符"?:",它由两个字符组成，可以把3个运算分量分隔开


运算符可能是一个字符，也可能由两个或三个字符组成，还有一些运算符是c++关键字。

例如，加号(+)就是一个字符，逻辑与(&&)就是两个字符，左移赋值号(<<=)就是三个字符，
测类型长度运算符(sizeof)就是一个c++的关键字


2.4.2  运算类型于运算符

每一种运算符与其他运算的区别有3个：
1.参加运算的运算分量的数量和类型
2.运算结果的数据类型
3.运算的具体操作


"*"一般是作为乘法运算符，同时，它还是单目的取值运算(用于指针类型)的运算符。
同一类运算可以组成一种运算类型，凡是具有相同运算分量和结果类型的运算划分
为同一类运算

2.4.3 赋值运算


<变量名>=<表达式>

注意，当把一个实数值赋给一个整数量时，将丢失小数部分，获得的只是整数部分，它是数组的一个近似值

在一个赋值表达式中可以使用多个赋值号实现多个变量赋值的功能

赋值号也可以使用在常量和变量的声明语句中，用于给符号常量和变量赋初值
注意，赋值号只起到赋初值的作用，不构成赋值表达式

2.4.4  算术运算符和算术表达式

算术运算是指int型，float型，double型(称为char型)的数值类数据计算后，
得到同一类型数据的运算。算术运算中所使用的运算符称为算术运算符


前缀增量和后缀增量的区别，
x++表示，先令x加1，然后再参加其他运算
++x表示，先令x参加其他运算，然后再令x加1

x初值10

++x 表示增1的x值，即11
x++ 表示


1.当参加运算的两个运算分量均为整型时(但具体类型可以不同，比如，一个为int，一个为char)
则运算结果为int

2.当参加运算的两个运算分量中至少有一个单精度型，并且另一个不是双精度型，
增运算结果为float型

3. 当参加运算的两个运算分量中至少有一个是双精度型，则运算结果为双精度型


若干要使用两个整数相除得到一个实数，则必须将其中之一强制转换为实数


2.4.5  关系运算符和关系表达式


< <= > >= == !==

<运算分量><关系运算符><运算分量>


2.4.6  逻辑运算符和逻辑表达式


!(逻辑非)  &&(逻辑与)   ||(逻辑或)


<逻辑运算符!><运算分量>

<运算分量><逻辑运算符 && 或 ||><运算分量>


2.4.7  位运算


c++提供了6种位运算

双目位运算符:  &(按位与)  |(按位或)   ^(按位异或)    >>(按位右移)    <<(按位左移)
单目位运算符:  ~(按位取反)



<运算分量><双目运算符><运算分量>
<单目运算符><运算分量>

2.4.8  其他运算


1.条件运算符


条件运算是c++中唯一的三目运算，与其对应的运算符?:称为条件运算符

<表达式1>?<表达式2>:<表达式3>


当计算由条件运算符构成的表达式时，首先计算<表达式1>,若其值非0，则计算出<表达式2>的值，
并用这个值作为整个表达式的值；若<表达式1>的值为0，则计算出<表达式3>的值，
并用这个值作为整个表达式的值


2.逗号运算符


c++中使用逗号运算符指明对多个表达式进行顺序求值。
<表达式1>,<表达式2>,....<表达式n>

3.sizeof 运算符


使用运算符sizeof可以进行字长提取操作，因此sizeof运算符又称为字长提取符，它的使用格式为：

sizeof(<运算分量>)

其中，sizeof为关键字，<运算分量>既可以是一个类型名，也可以是一个变量名

字长提起运算的结果为一个整数，该整数表示指定的类型或变量的字节长度，即在内存中占用的字节(Byte)数

4.圆括号运算符

c++中不仅将圆括号() 归为运算符，而且根据不同的使用方式，可以对圆括号运算符的功能有3个解释

（1）圆括号用于函数调用，格式为
<函数名>(<实参数>)

圆括号运算符跟在函数名的后面，表示进行函数调用；圆括号中是函数的实际参数列表

比如  ， sqrt(2)
（2）圆括号用于强制类型转换。格式为

(<类型名>)<表达式>

int a =6

(float)a



（3）圆括号用于类型构造，格式为


<类型名>(<表达式>)

类型构造是使用圆括号中<表达式>的值构造一个具有目标数据类型的值，要构造的目标数据类型由
<类型名>指定

比如，double d = 3.6;
int n = int(d);

类型构造在功能上等价于强制类型转换

<类型名>也可以是用户定义数据类型(如类类型)，用户定义数据类型的默认值由该类型的
构造函数给出。
除此之外，考虑到内容的先后顺序，

(1)数组下标运算符：[](下标)
(2)指针运算符：*(取地址)和&(值引用)
(3) 动态存储分配运算符：new(分配)和delete(释放)
(4)作用域限定运算符:::(类域或全局域)


2.4.9  优先级和结合性


1.优先计算带有括号的子表达式
2.在没有括号的部分，依照运算符优先级，由高到低进行计算
3.具有相同优先级的运算符，按照结合性规定，依次进行计算


1.::
2. .  -> []  ()  ()  ++ --
3. sizeof sizeof  ++ -- ~ ! - + & * new delete delete ()
4. .* ->*
5. *  / %
6. + -
7.  << >>
8.  < <= > =>
9. ==  !=
10. &
11. ^
12. |
13. &&
14. ||
15. ?:
16 = *= /= %= += -=  <<= >>= &= |= ^=
17. ,


第3章  基本控制结构


在程序设计语言中控制结构用于指明程序的执行流程。c++语言提供的基本控制结构包括3种：

1.顺序结构： 按照先后顺序依次执行程序中的语句
2.选额结构：按照给定条件有选择地执行程序中的语句
3. 循环结构：按照给定规则重复地执行程序中的语句


3.1 c++语句

语句是c++程序中的基本功能单元。任何一条c++语句都会为完成某项任务而进行相关操作。

c++语句通常以分号作为结束标志。

c++语句按照不同功能大体分为6中类型
1.声明语句：用于对程序中的各种实体进行声明，定义及初始化
2.表达式语句：用于对程序中的数据进行具体操作和处理
3.选择语句：用于实现程序的选择结构
4.循环语句：用于实现程序的循环结构
5.跳转语句：用于实现程序执行流程的转移
6.复合语句：用于表示程序中的语句块

c++中并不存在赋值语句和函数调用语句，赋值和函数调用都属于表达式而不是语句


3.2 顺序结构

顺序结构是c++程序中执行流程的默认结构。在一个没有选择和循环结构的程序中，语句将按照书写
先后顺序，从左向右，从上而下依次执行。


除了选择，循环和跳转语句外，其他Ｃ++语句都可以看做实现程序顺序结构的语句

３．２．１　声明语句

声明语句又称为说明语句，它可以用来对程序中出现的各种名称记性声明。这些名称通常是表示
变量，常量，函数，结构，类，对象等实体的标识符。在Ｃ++程序中，一个名称在使用之前必须先
被声明。声明的目的是告诉编译器某个名称所指代的实体类型。

（１）　变量声明，

char ch;  声明和定义char型变量
int count = 1;  声明，定义和初始化int型变量
extern int error_num;  声明int型变量

（２）　常量声明

const int MAX_LEN = 128;  声明，定义和初始化int 型常量
const double pi = 3.14159  声明，定义和初始化double型常量

（３）　函数声明

double sqrt(double);  声明函数
int max(int a, int b) { return a > b ? a:b;}  声明和定义函数

(4) 类型声明

typeof unsigned int ID;  声明和定义类型
enum Color{RED,GREEN,BLUE};   声明和定义枚举
struct Date{int y,m,d;};  声明和定义结构
class Employee;   声明类


定义，就是对某个名称所指代的实体进行具体描述

ｃ++规定，一个实体的定义只能出现一次；而其声明却可以出现多次。
同一实体的多个声明必须在类型上保持一致；

另外，使用声明语句还可以在定义变量时对其进行初始化

将声明(包括定义)作为一种语句处理是c++对c的语法扩展。
在c++中，声明语句可以出现在任何其他语句能够出现的地方，因此能做到在需要使用某个变量的恰当位置对其进行
声明，定义及初始化

３．２．２　　表达式语句

c++中所有对数据的操作和处理工作多事通过表达式语句来完成的。
<表达式>;
在任何合法的c++表达式后面添加一个分号便构成了一条表达式语句

（１）　赋值操作
count = 5;
i=1,j=2;
a = b+c;
a = b= c;

(2) 复合赋值操作
a += 9;
b *= c;

(3) 增量，减量操作
i++;
--j;

(4) 函数调用操作

abs(x);
sqrt(9);
fun(a,b);

(5) 输入输出操作

cout << a+b; 输出a+b的值
cin >> i >> j;　输入数据到i,j

3.2.3  基本输入输出

一个程序通常会向用户输出一些信息，一般也会要求用户输入一些信息。
c++程序的输入输出操作是通过标准库中的输入，输出流对象来完成的。

在头文件iostream中定义了代表屏幕的标准输出流对象cout和代表键盘的标准输入流对象cin.
在程序中使用cin和cout之前，应首先加入预处理命令：#include<iostream>,以包含标准头文件iostream

使用cout进行数据输出操作的格式为：

cout << Expr;

cout可以用来对c++中所有的常用数据类型进行输出操作

cout还允许在一条语句中连续使用插入运算符来输出多项数据

int i=5,j=10;
cout << i << j;

将变量i和j的值依次显示在屏幕上。cout并不会在数据项ｉ和j之间加入任何分隔字符。

可以在使用cout进行多项数据的输出时加入一些分割字符.

常用的分隔字符有空格(字符常量'')和水平制表(字符常量'\t')
换行('\n')
使用水平制表符'\t'可以将多项数据对齐显示到屏幕的不同区域(每个区域之间的距离通常为８个字符)

c++中提供了两种进行换行输出的方法：

(1) 使用换行字符'\n
(2) 使用输入/输出操作符endl

两者实现的功能完全相同，都是使随后的内容从新的一行开始显示

使用cin进行数据输入操作的一般格式为：

cin >> Var;

这是一条表达式语句。其中，Var代表一个变量；“>>"  称为提取运算符。　整条语句的含义是：
程序将暂时中止执行，等待用户从键盘上输入一个数据。
如果用户键入一个有效的数据并按下了回车键，程序就将次数据保存到变量Var中，并继续执行后续语句。


与cout相同，cin也可以用来对c++中所有的常用数据类型进行输入操作

cin也允许在一条语句中连续使用提取运算符来输入多项数据


用户要求连续输入两个int型数值，并将它们分别保存到变量i和j中。在进行多项数据的连续输入时，应键入空白字符(包括
空格键，回车键和Tab键）将相邻的两项数据分隔开。

5<SP>10<CR>
<SP>表示空格键
<CR>表示回车键

注意：用户输入数据的类型必须于保存该数据的变量类型相匹配，否则将得到错误的结果

开始使用iostream形成新的头文件。
新标准中引入了名字空间(namespace),其目的是为了避免一个程序不同模块中相同名称所引起的明明冲突。

使用关键字using将std名字空间中的标识符全部引入到全局名字空间(即用户程序中)
具体用法是在包含标准头文件的include预处理命令后添加语句行

using namespace std;

3.2.4 复合语句和空语句

复合语句能够实现语句块的概念；空语句也可以在一些情况下排上用场

复合语句又称为块语句，它是用一对花括号"{}"将若干条语句包围起来而组成的一条语句

{
 <语句１>
<语句２>
}


用分隔符把若干条语句组成的序列包围起来，使它们在逻辑上称为一条语句。

复合语句可以出现在程序中任何需要语句的地方，复合语句的应用场景：

(1) 函数的函数体；
（２）循环语句的循环体；
（３）　if语句的分支；
(4) switch语句的执行部分

实际上，空语句是一种特殊的表达式语句，　
空语句只由一个分号组成。

int main()
{
    ;
}

主函数main中只含有一条空语句，执行此程序不会产生任何动作。
在某些场合下却需要用它作为占位符，以表示该处存在着一条语句


３．３　　选择结构


if 语句和switch语句

３．３．１　if语句

１．基本if语句

基本if语句的功能是根据给定条件是否成立来决定要不要执行一条语句或语句块，
if(<条件>)<语句>
说明：
（１）如果<条件>是一个表达式，则当次表达式的值不为０时，条件结果为"真";只有
当此表达式的值为０时，条件结果为才为“假”
（２）<条件>也可以是一条声明语句，其中必须定义一个变量对它进行初始化。
若干此变量的值不为０,则条件结果为"真";若此变量的值为0，则条件结果为"假"


２．　if ...else 语句

if　(<条件>)
    <语句１>
else
    <语句２>

3. if语句的嵌套

if子句和else子句可以是任何类型的c++语句，也可以是if...else语句本身

else关键字总是与它前面最近的未配对的且可见的那个if关键字配对。（就近原则）

复合语句内的if关键字对其外面的else关键字是不可见的

程序设计中有时使用嵌套的if语句构成if...else..if阶梯结构

if(<条件>)
    <语句>
else if (<条件>)
    <语句>
else if (<条件>)
    <语句>

else
    <语句>

3.3.2 switch语句

switch语句又称开关语句，它也是一种选择语句。switch的功能是根据给定表达式的不同取值
来决定从多个语句序列中的哪一个开始执行


switch(<表达式>){
case<常量表达式１>：
    <语句序列1>
case<常量表达式２>：
    <语句序列2>


default:
    <语句序列n+1>


<表达式>的值必须属于整型，字符型或枚举型

(1)多个case标号可以共用一组语句序列，以实现对多个常量值执行同一操作
(2) default标号语句是可选的。当default不出现时，如果<表达式>的值于所有<常量表达式>
的值都不相等，则程序执行流程会跳过switch语句
（３）　switch语句可以嵌套。case和default标号只与包含它们的最内层的switch组合在一起

（４）　当需要针对表达式的不同取值范围进行不同处理时，使用if...else...if阶梯
结构比较方便。因为switch语句只能对相等关系进行测试，而if语句却可以用关系表达式
对一个较大范围内的值进行测试

３．４　循环结构

在程序设计中，常常需要根据给定的规则重复地执行某些操作。
使用循环结构可以方便地让程序处理各类重复操作。
实现程序循环结构的语句称为循环语句。
c++中提供了三种循环语句：for语句，while语句，do...while语句

３．４．１ for语句

for(<表达式１>;<表达式２>;<表达式３>)
    <语句>

其中，for为关键字；<表达式１>是for循环的初始化部分，一般用来设置循环控制变量
的初始值；<表达式２>是for循环的条件部分，用来判定循环是否继续进行；
<表达式３>是for循环的增量部分，一般用于修改循环控制变量的值；
<语句>称为for循环的循环体，它是要被重复执行的代码行，
for循环体可以是单条语句，也可以是由花括号包围起来的复合语句

（１）<表达式１>可以是变量声明语句，即循环控制变量可在其中定义
int num =0;
for(int i=1; i<= 100;i++)
    sum += i;

C++中规定在<表达式１>中定义的变量只在for语句内部有效，for循环结束后
变量将自行消失。只要循环控制变量不在程序的其他地方使用，
则<表达式１>是定义循环控制变量的最佳位置

(2) <表达式１>可以省略。这时，应在for语句之前给循环控制变量赋初值。
注意：省略<表达式１>时，其分后的分号不能省略
（３）<表达式２>可以省略。这时，for语句将不再判断循环条件，循环
会无限次得执行下去，变成"死循环"。
注意，省略<表达式２>时，其后的分好同样不能省略。

（４）　<表达式3>可以省略。这时，应在循环体中对循环控制变量
进行递增或递减操作，以确保循环能够正常结束

（５）　三个表达式可同时省略。这时，for语句显然也是一个"死循环"

(6) <表达式1>,<表达式2>，<表达式３>都可以是任何类型的Ｃ++表达式


3.4.2 while循环

while(<表达式>)<语句>


其中，while为关键字;<表达式>是while循环的条件，用于控制循环是否继续进行；
<语句>称为while循环的循环体，它是要被重复执行的代码行；
while循环体可以是单条语句，也可以是由花括号括起来的复合语句。
实际上，while语句是for语句省略掉<表达式１>和<表达式３>的特殊情况

注意：
(1) 由于while语句中缺少对循环控制变量进行初始化的结构，因此在使用while循环之前
对循环控制变量进行初始化非常重要。
（２）在while循环体中不要忘记对循环控制变量的值进行修改，以使循环趋向结束


注意，在不知道具体循环次数的情况下，使用while语句实现循环结构较为方便

３．４．３　do...while语句

do...while语句也是一种循环语句，它的功能类似于while语句，只是将循环的
判定条件移到了循环体之后

do<语句>while(<表达式>);

其中，do和while为关键字；
<语句>称为do...while循环的循环体，它是要被重复执行的代码行，
do...while循环体可以是单条语句，也可以是由花括号包围起来的复合语句；
<表达式>是do...while循环的条件，它用于控制循环是否继续进行

注意，在do...while语句中最后的分号不能丢掉，它用来表示do...while语句的结束

(1) 在使用do...while循环之前同样需要对循环控制变量进行初始化；
在do...while循环体中仍然不要忘记对循环控制变量进行修改，
以使循环趋向结束，避免死循环的发生

(2)do...while循环与while循环的不同之处在于：do...while循环的循环体在前，
循环条件在后，因此do...while循环体在任何条件下(即使不满足循环条件)都至少
被执行一次。
而while循环的循环条件在前，循环体在后，当条件不满足时，循环体有可能依次也不会执行。

说明：
do...while 语句通常用在循环条件是否成立由循环体决定的情况下


３．４．４　　循环的嵌套

在一个循环结构中又完整地包含着另一个循环结构称为循环的嵌套。
ｃ++中三种类型的循环语句都可以相互嵌套，并且嵌套的层数没有限制。
程序设计中有许多问题需要使用循环结构的嵌套来解决


3.5 跳转语句

使用跳转语句可以实现程序执行流程的无条件转移。
c++中有４种跳转语句，它们是,break,continue,return ,goto

3.5.1 break语句

break语句又称为跳出语句，
break;
即由关键字break加上一个分号构成。

break语句只能用在switch语句和循环句中。
在switch语句中，break用来使执行流程跳出switch语句，而继续执行switch后面的语句。
在循环语句中，break用来使执行流程无条件地跳出本层循环

break还经常用于跳出死循环

3.5.2 continue语句

continue语句又称为继续语句
continue; 即由关键字continue加上一个分号构成


continue语句仅用在循环语句中，它的功能是:跳过循环体中尚未执行的语句结束
本次循环，接着进行下一次是否执行循环的条件判定

在while和do...while循环中，continue语句将使执行流程直接跳转到循环条件的判定部分，
然后决定循环是否继续进行。在for循环中，当遇到continue时，
执行流程将跳过循环体中余下的语句，而转去执行for语句中的<表达式３>，
然后根据<表达式２>进行循环条件的判定以及决定是否继续执行for循环体



３．５．３　　return语句

return语句又称为返回语句

(1) return；
（２）　return <表达式>；
其中，return为关键字，<表达式>可以是任何类型的c++表达式

return语句只能在函数体中。在返回类型为void的函数体中，若想跳出函数体，
将执行流程转移到调用该函数的位置，应使用return语句的第１种格式。
在返回类型不是void的函数体中，应使用return语句的第２种格式，
使执行流程转移到调用该函数的位置，并将<表达式>的值作为函数的返回值

对于非void返回类型的函数来说，其函数体中必须至少具有一条return 语句


３．５．４　　goto语句

goto语句又称为转向语句

goto<标号>;

其中，goto为关键字；<标号>是一个由用户命名的标识符。
在goto语句所处的函数体中必须同时存在一条由<标号>标记的语句

<标号>:<语句>

即在<标号>和<语句>之间使用一个冒号分隔，这种语法结构称为标号语句

标号语句中的<标号>应与goto语句中的<标号>相同，<语句>可以是任何类型的c++语句

注意：某个goto语句和相应的标号语句必须位于同一函数体内

goto语句的功能是使执行流程跳转到<标号>所标记的<语句>处(即对应的标号语句处)

goto语句的另一个用处是使执行流程从多层循环的深处直接跳转到循环之外。

注意：一个复合语句之处的goto语句不能跳转到该复合语句内部。


第４章　数组，指针与引用

c++提供的导出数据类型：数组，指针和引用。
人们经常要使用大量集中在一起的数据来工作，ｃ++使用数组来满足这一需求；
指针是用来操纵地址的特殊类型变量，它可作为函数参数用来传递数组变量，也
可用来访问和操作内存空间，指针是理解许多c++语言现象的关键

引用提高了程序的可读性


４．１　数组

4.2.1 指针和地址


1.指针说明

从指针的定义可知，指针是用所指对象类型来表征的

int *px;
char *pc;
char *acp[10];
char(*pac)[10];
int f();
int *fpi();
int(*pfi)();
int(*p[4][3])();
int*(*pfi)();


int x= 100;
int *px;

则成指针px指向具体对象x,*px则为px所指对象的值，即100,
以后凡是对x的引用，都可用*px来代替


注意，在使用任何指针变量之前必须先给它赋予一个指向合法具体对象的地址值

使一个指针指向一个具体对象的方法有：
1.使用new运算符(或malloc和alloc等函数)给指针分配一个具体空间
2.将另一个同类型的指针赋值给它以获得值
3.通过&运算符指向某个对象

2.指针运算

（1）指针和整型量可以进行加减。如果p指向字符数组的指针，则p+1指向字符数组下一个元素的指针
(2) 若p1,p2为指针，当p1和p2指向同一类型时，可以进行赋值

如， p1=p2;
则p1,p2指向同一对象


注意，该语句使得两指针p1和p2指向同一空间，若其中一个指针所指空间被删除(释放)，
则另一个指针所指空间也会被删除，这就是指针悬挂问题，这也是c++的缺点之一

实际上，程序运行时的许多问题都是由于指针悬挂造成的(程序员由于正常
释放一个不用的指针而造成另一个正在用的指针称为空指针)

（3） 两个指向同一类型的指针，可以进行= =,>,<等关系运算，其实就是地址的比较


（4） 两个指向同一数组成员的指针可进行加减，结果为两个指针之间相差元素的个数

这与数组中情况是不同的，在数组中，在已知两个数组下标的情况下，可用第一种方式来计算中间元素的下标，如在数组中进行折半查找(二分查找)时，采用整个方法


(5) 几组常见的指针运算表达式比较

1.p++和p+1的区别

指针p++结果为P指向下一元素;p+1结果为下一元素的指针，但p本身不变

2. y= *px+1 和 y = *(px+1) 的区别

×px+1结果为px所指对象内容为1；
*(px+1)结果为px指针加1，并取结果指针所指对象内容。

3. y= (*px)++ 和 y= *px++ 的区别

(*px)++ 为先取指针px所指对象内容进行运算(因为运算符++为后置运算)，
然后对指针px所指对象内容加1；
*px++为先取指针px所指对象内容进行运算，然后指针px加1.


4.2.2  指针和数组

在c++中，指针和数组的关系很密切。实际上，数组的参数传递，数组元素的存取，
都可以通过指针来操作完成。指针和数组常常可以互换


在c++中，数组的名字就是指向该数组第一个元素(下标为0)的指针，即该数组
第一个元素的地址，也即数组的首地址

一般情况下，一个数组元素的下标访问a[i]等价于相应的指针访问*(a+i).
但要特别注意：数组名和指针(变量)是有区别的，前者是常量，即数组名是一个常量指针，
而后者是指针变量。因此，尽管可以写pa=a;但不嗯给你写：a= pa或a++
我们不能改变常量的值，也不能取常量的地址


数组名可作为参数进行传递。当将数组名传给函数时，实际上传递的是数组的开始地址(即数组
第一个元素的地址)

指针运算闭数组运算的速度快


使用指针的另外一个原因是在大量数据传递时，传递指针要远比传递数据本身效率高的多，
如在函数参数传递及函数返回值时。当然，使用指针会给程序带来安全yinhuan(如指针悬挂问题)，
同时还使得程序的可读性降低（用数组实现的程序要比用指针实现的程序可读性好）


对于字符串常量，可以把它看成是一个无名字符数组，c++编译程序会自动为它分配一个
空间来存放这个常量，字符串常量的值本身就是指向整个无名字符数组的第一个字符的指针，
其类型是字符指针

注意，字符数组和字符指针使用时容易混淆

方法1使用传统的数组下标形式访问数组中每一个元素，并记性累加；
方法2利用一个指向元素的指针iPtr来依次访问数组元素，初始时iPtr指向数组的第一个元素，然后
移动它，使其指向每一个元素
方法3仍然使用指针方式访问数组元素，但指针iPtr始终不变(即指向数组的首地址)
方法4将指针iPtr用数组形式来访问数组元素
方法5将数组作为一个指针来使用

4.3 引用
1.引用的概念

引用是个别名，建立时须用另一个数据对象(如一个变量)的名字进行初始化，以指定
该引用所代表的数据对象。此后，对引用的任何操作实际上就是对所代表的数据对的操作。
系统不会为引用再次分配存储空间


在类型名后跟引用运算符"&",以及引用名来创建一个引用。
引用名就是一个变量名。

引用并不占用额外的存储空间


注意：
引用运算符于地址操作符使用相同的符号(即运算符重载)，
但 它们含义不一样。引用运算符只在声明变量的时候使用，它放在类型名后面


int& rInt = intOne;

任何其他一元(单目)运算符&(注意，该运算符作为二元运算符时为按位"与"运算符)


使用引用的原则：
1.创建引用时，必须立即对其进行初始化(指针则可以在任何时候被初始化)
2.一旦一个引用被初始化为一个对象的引用，它就不能再被改变为对另一个
对象的引用(指针则可以在任何时候改变为指向另一个对象)
3.不可能由NULL引用。必须确保引用是具体合法的对象的引用(即引用应和一块合法的存储空间关联)

2.用引用传递函数参数

引用的一个重要用途就是作为函数的参数。如果有占用空间大的对象(例如一个打的结构对象或类对象)
需要作为函数参数传递的时候，在c中，往往使用指针，因为这样可以避免将整个实参对象数据
全部复制给形式参数，可以提高程序的执行效率。

在c++中，既可以使用指针，也可以shiyong 引用。
引用作为参数的最大好处既可以像指针那样工作，其使用方式由和一般变量相同。
引用比指针有更好的可读性

4.4 动态存储分配


程序中用于存储数据的变量和数组等实体在使用前都必须通过声明语句进行定义。

c++编译器根据这些声明语句了解它们所需存储空间的大小，并预先为其分配适当的内存空间。
这些变量或数组在内存中所占据的空间大小必须在编译时(即程序运行前确定下来，这种
内存分配方式称为“静态存储分配”)

但在很多时候，程序中所需的内存数量只有等到运行时刻才能确定下来。例如，需要在程序
运行期间根据用户提供的输入信息决定分配存储空间的大小。
这时就应使用"动态存储分配"方式申请获得指定大小的内存空间；当动态分配的内存空间
闲置不用时同样有必要对其进行释放。

动态存储分配功能在c++中是通过new和delete运算符来实现的


1.使用new获得动态内存空间

运算符new用于申请动态存储空间，它的操作数为某种数据类型且可以带有初值表达式或元素个数。
new返回一个指向其操作数类型变量的指针。
使用new对某种类型变量进行动态分配的语法：

<指针> = new<类型>；
其中，<类型>表示要分配的变量类型(如char,int,double等)
<指针>表示指向<类型>类型变量的指针(如char *,int *,double *等

int* pi = new * int;
动态分配了一个int型变量，并将次变量的地址赋值给int型指针pi/

如果需要在分配变量的同事为其赋予初值，则可以在类型之后加上初值表达式(放在圆括号内)

int* pi = new int(256);

不仅动态地分配了一个int型变量而且将其值初始化为256


运算符new还可以用来对数组进行动态分配，这时需要在数据类型后面添加方括号[],
并在其中指明所要分配的数组元素个数。

<指针> = new <类型>[<元素个数>];

其中，<类型>表示数组元素的数据类型；
<指针>表示指向<类型>元素的指针；
<元素个数>是一个表达式，用于表示需要动态分配的数组元素个数

int* pia = new int[10];

注意，new运算符没有提供动态分配的数组进行初始化的语法结构


使用new 动态分配的数组与一般定义语句声明的数组之间的最大区别是，前者的元素个数可以是一个变量，
而后者的元素个数必须是常量。

这就意味着动态存储分配能够在程序运行时根据实际需要指定数组元素的个数。


用于动态分配的内存空间又称为堆内存(Heap)或自由存储区(Free store),
它通常由操作系统管理且数量有限，因此如果在程序中不断地分配堆内存就有可能将其耗尽。
在这种情况下，系统无法再对new提出的堆内存分配请求给予满足，此时new会返回空指针NULL,
表示动态存储分配操作失败。


2.使用delete释放动态内存空间

当动态分配的内存空间在程序中使用完毕之后，必须显式地将它们释放；
这样做的目的是把闲置不用的堆内存还给系统，使其可以被系统重新分配。
在c++程序中由new分配的动态内存空间必须通过delete运算符释放。

使用delete对动态分配的单个变量进行释放的语法：

delete<指针>；

其中，<指针>表示指向单个变量的指针。
使用delete对动态分配的数组进行释放的发

delete []<指针>；

其中，<指针>表示指向数组首元素的指针。delete之后的方括号指明将要释放的内存空间
中存储着数组元素。
注意：上述指针必须是由new返回的指向动态内存空间额地址，而不能是普通变量或数组的地址，
否则会产生错误。

也就是说，如果在程序中需要分配动态内存空间，则new和delete总是程度出现的


第5章 函数


函数是一个可以独立完成某个功能的语句块。
c++程序其实就是由一系列函数组成。
main函数是其中一个函数，c++程序从main函数开始执行。


在c++中，函数分为标准函数(又称为预定义函数)和用户自定义函数。
标准函数是系统已实现并通过函数库形式提供的函数，如
数学函数 sqrt,pow
字符串处理函数  strcpy,strcat,strcmp

程序员在编写程序时可以直接使用标准函数。在c++中，所有的标准函数都被放在
不同的函数库中，并有一个与之对应的头文件，例如，
头文件iostream中包含了I/O函数，头文件cmath中包含了常用的数学函数

如果要在程序中使用标准函数，必须使用include预处理命令将包含该函数的头文件
包含到程序中。

#include <cmath>

因为标准函数在不同的开发平台上都具有同一的接口，所以使用标准函数一方面提高了程序的开发效率
另一方面又使得程序具有很好的可移植性


5.1  函数定义

在程序中使用函数可以极大地增强程序的可读性，并能是复杂问题简单化。

在标准c++中，函数的定义形式为：

<返回类型><函数名>(<形参列表>)
{
    <函数体>}


<函数名>一般是标识符，
<形参列表>由逗号分隔，分别说明函数的各个形参，

形参将在函数被调用时从调用函数那里获得数据。在c++中，函数形参列表可以为空，
即一个函数可以没有参数。
但是即使函数形参列表为空，括起函数参数的一对圆括号也不允许省略


<返回类型>又称函数类型，表示一个函数所计算(或运行)的结果值的类型。

如果一个函数没有结果值，如果函数仅仅用来更新(或设置)变量值，显示信息等
则该函数返回类型为void类型。
一个没有返回值的函数类似于一些语言的过程(procedure)

由一对花括号括起来的<函数体>是语句的序列，它定义了函数应执行的具体操作

c++不允许函数定义嵌套，即在一个函数体内不能包含其他函数的定义

在C++中，return是一个关键字，当函数执行到return语句时，函数将立即终止执行，并将
程序的控制权返回给调用函数。

如果执行到main函数中的return语句时，整个程序将终止

当一个函数带有返回值时，应保证函数每个可能执行路径上应有返回值。

当函数没有return语句时，在执行玩最后一条语句后将返回到调用函数


5.2  函数调用


已经定义的函数可以在其他函数中使用，如同使用标准函数一样

c++中函数调用的一般形式为：
<函数名>(<实参数>)

当调用一个函数时，其实参的格式，类型即排列次序必须于函数定义时的形参保持一致
实参于形参应该一对一地匹配。若函数定义时没有形参，则函数调用时<实参数>也为空


依据对函数返回值的使用方式，函数的调用方式可以分以下几种

（1） 语句调用。通常用于不带返回值的函数。这种情况下，被调用函数作为一个独立的语句出现在程序中

(2) 表示式调用。将被调用函数作为表达式的一部分进行调用，适用于被调用函数带有返回值的情况
（3） 参数调用。被调用函数作为另一个函数的一个参数进行调用，
c = max(3,max(1,2));

实际上，用来作为表达式调用的函数也可以作为语句调用执行

5.3 函数原型

在C++中，使用任何函数之前必须已经知道它,这就如同时用一个变量之前必须定义过。
如果要在main函数中调用max函数，则逻辑上max函数的定义应放在main函数之前


实际中，在c++中，程序员通常都将main函数放在程序的最前面，因为程序总是从main函数开始执行。

对大型软件来说，一个程序通常由多个文件组成，如果一个文件中的函数要调用另一个文件中的函数，
在c++中，使用函数原型来解决

在c++中，函数在使用之前要预先声明。这种声明在标准c++中称为函数原型(function prototype)
函数原型给出了函数名，返回类型以及在调用函数时必须提供的参数的个数和类型

函数原型的语法：

<返回类型><函数名>(<形参列表>);

(注意，在函数原型后要有分号)

实际上函数原型声明由两种方式：
（1） 直接使用函数定义的头部，并在后面加上一个分号；
int max(int m, int n);
   (2)在函数原型声明中省略参数列表中的形参变量名，仅给出函数名，函数类型，参数个数及次序

intmax(int,int);


注意，在c++中，在调用任何函数之前，必须确保它已有原型声明。函数原型声明通常放在程序文件的
头部，以使得该文件中所有函数都能调用它们

实际上，标准函数的原型声明放在相应的头文件中，这也是为什么在调用函数时必须要包含相应的头文件的
原因之一。


在了解函数定义，函数调用和函数原型之后，就可以写出一个完整的c++程序，并可将其编译和运行