
1.2

c++是一种面向对象的程序设计语言

抽象数据类型
封装和信息隐藏
以继承和派生方式实现程序的重用
以运算符重载和虚函数实现多态
以模板来实现类型的参数化



c++是c的超集


1.c++继承了c语言简明，高校，灵活等优点
2.以前使用c语言编写的大批软件可以不加任何修改，直接在c++开发环境下维护
3.c语言程序员只需要学习c++扩充的新特性，就可以使用c++编写程序

c++的特性

1.封装性

封装性是指将数据和算法捆绑成一个整体，这个整体就是对象，描述对象的数据被封装在内部。如果需要
 存取数据，可以通过对象提供的算法来进行操作，而无需知道对象内部的数据是如何表示和存储的
类支持封装性和信息隐藏。用户定义的类一旦建立，就可看成是一个完全封装的实体，可以作为一个整体
单元来使用。类的内部数据表示被隐藏起来，类的用户不需要知道类内数据的表示方法，只需要执行类
对外提供的算法，就可以完成某项功能


2.继承性


继承性是指一种事物保留了另一种事物的全部特征，并且具有自身的独有特征

c++语言采用继承来支持重用，程序可以在现有类型的基础上扩展功能来定义新类型。
新类型是从现有类型中派生出来的，称为派生类


3.多态性

多态性是指当多种事物继承自一种事物时，同一种操作在它们之间表现出不同的行为

c++语言中使用函数重载，模板，虚函数等概念来支持多态性


c++的关键字

bool,catch,class,const_cast,delete,dynamic_cast,
explicit,false,friend,inline,mutable,namespace,
new,operator,private,protected,public,
reinterpret_case,static_cast,template,this,throw,true,
try,typeid,typename,using,virtual,wchar_t

标识符是用户为程序中各种需要命名的“元素”所起的名字，这些“元素”包括：
变量，符号，常量，函数，函数的参数，结构，类，对象等

字面常量

常量是指在程序中固定不变的值。常量一般有两种表示形式，即符号常量和字面常量

运算符是对程序中的数据进行操作的一类单词

1.单字符组成的运算符，+ -  * /
2.双字符组成的运算符，   ++  <=  && *=  ->
3.三个字符组成的运算符， <<=   >>=
4.关键字运算符  new delete sizeof


标点符号是在程序中起分割内容和界定范围作用的一类单词

(空格)：语句中个成分之间的分隔符
;(分号)：语句的结束符
'(单引号)：字符常量的起止标记符
"(双引号)：字符串常量的起止标记符
#(井字号)：预处理命令的开始标记符
{(左花括号)：复合语句的开始标记符
}(右花括号)：复合语句的结束标记符
//(双斜杠)：行注释的开始标记符
/*(斜杠和星号):块注释的开始标记符
*/(星号和斜杠)：块注释的结束标记符


#include <iostream>  

这是一条预处理命令。c++中每一个以符号"#"开头的行都是预处理命令。使用预处理命令可以更好地
进行程序的组织。
#include <iostream>的作用是将头文件iostream的内容加入到程序中。iostream是
一个C++标准头文件，其中定义了一些输入输出流现象

int main() 是函数的声明。主函数是所有c++程序开始执行的入口。
无论主函数处于程序中的什么位置，其中的代码总是最先被执行的。
每个程序都必须有且只有一个主函数，主函数的名称必须是main
main前面的int主函数main将返回一个int 类型的值。int代表整型值，它是c++中的一个基本数据类型

cout是c++中的标准输出流对象，它通常代表计算机的屏幕。
cout在标准头文件iostream中被声明(标识符cout位于std名字空间中，必须用前缀std:进行修饰)
要是用它就必须先包含此文件，

<<是输出操作符，功能是将它右边的内容输出到它左边的指定设备上

return 0 ，它的功能是使用主函数main结束并将整数0返回给运行此程序的操作系统

开发c++程序的过程，分为编辑，编译，连接，运行和调试

.cpp为扩展名的文件(保存c++头文件时应以.h为扩展名)


2. 数据类型


逻辑型，字符型，整型，浮点型，空值型

空值型用关键字void表示，因此又称为void型。
空值型的取值为空。c++中不存在void型的常量或变量
c++规定，所有函数说明都必须指明返回值类型，没有返回值的函数应说明为void类型；
另外，void类型还可以用来声明一个指针变量   void *p

是一条指针变量声明语句，其中指针变量p所指向的数据类型尚不确定


2.1.2  基本类型的派生类型

c++语言中，基本类型的字长及取值范围可以放大和缩小，改变后的类型就叫做基本类型的拍盛行


派生类型声明符由基本类型关键字char,int,float,double签名加上类型修饰符组成

类型修饰符包括

short  短类型，缩短字长
long  长类型，加长字长
signed   有符号类型，取值范围包括正负值
unsigned 无符号类型，取值范围只包括正值



比如  short int 

2.2  常量

常量是指在程序执行过程中值不改变的量。常量有多种表示形式，即字面量和符号常量。

字面常量的类型是根据书写形式来区分的，分别为：整型，浮点型，字符型，字符串型，每个
字面常量的字面本身就是它的值。
符号常量是一个标识符，在程序中必须遵循“先声明，后使用”的原则。

2.2.1 逻辑常量   true  false

2.2.2  字符常量

字符常量简称字符，它是以单引号作为起止符号，中间有一个或若干个字符

转移序列不但可以作为字符常量，也可以同其他字符一样出现在字符串中

一个字符用于显示输出时，将输出字符本身或体现出相应的控制功能；当它在表达式子中参加整数运算时，将
使用它的ASCII码量


2.2.3  整型常量


十进制，八进制，十六进制


2.2.4  实型常量

实型常量简称实数，对应数学中的实数。

实型常量有十进制的定点数和浮点数表示


1. 定点数   .12


2.浮点数表示  3.2E5



2.2.5  枚举常量


枚举常量是枚举类型中定义的值，即枚举值。枚举类型属于用户定义类型，用关键字enum表示，
因此又称为enum类型。

用户通常利用枚举类型定义程序中需要使用的一组相关符号常量


enum color {RED=1,YELLOW,BLUE};

1.一个enum类型实际上是int类型的一个子集，其每一个枚举值代表一个整数
2.枚举类型的声明也可以作为组声明若干整型符号常量的方法
把每一个要声明的符号常量作为一个枚举值，将各个枚举值合在一起定义成一个枚举类型

由于枚举类型属于用于定义数据类型，一旦美剧类型被定义后就可以使用它来定义变量


2.3 变量

变量是程序中用于存储信息的单元，它对应某个内存空间。在定义变量时，需要说明变量
的名字和数据类型。这些信息将告诉编译器要为变量分配多少内存空间，以及变量中要
存储什么类型的值。由于变量名可以代表其存储空间，因此程序能够在变量中存储值和取出值


2.3.1  变量的定义

变量的定义要通过变量声明语句来实现的，变量声明语句为


[存储类]<类型名><变量名><初始表达式>

存储类有四种，分别为auto,register,static,extern, 默认的存储类为auto


类型名为已存在的一种数据类型名称，或用户定义的数据类型名

变量名是用户定义的一个标识符，用来表示一个变量，该变量可以通过后面的可选项赋予一个值，
称为给变量赋初值，也叫作对变量进行初始化。
若变量后不带有初值表达式，则不为变量赋予任何值，此时的变量值不确定


变量名的命名遵循额原则：
1.是一个合法的c++标识符
2.不能是c++关键字


初值表达式：是一个表达式，它的值就是赋予变量的初值


2.3.2  变量的使用方式

1.全局变量和局部变量
全局变量是在所有函数定义，类定义和程序块之外声明的变量。
声明全局变量时如果在程序中不对它进行专门的初始化，该变量会被系统
自动初始化为0。在程序的任何一个函数，类或程序块之内均可以访问全局变量


局部变量是在某个某个函数定义，类定义或程序块之内声明的变量。
局部变量只能在声明它的函数，类或程序块中被访问

程序中的x是全局变量，它在所有函数和程序块之外被声明，但没有进行初始化，
所以系统默认得将其初始化为0.变量y是局部变量，它在main()函数中
被声明，因为只能在该函数中被访问。
声明局部变量y时也没有进行初始化，与全局变量不同的是，系统并不给它
赋默认值，没有初始化的局部变量中保存着一个不确定的值。

2.生存期和作用域


生存期是指从一个变量被声明且分配了内存开始，直到该变量声明语句失败，它
占用的内存空间被释放为止。一个全局变量的生存期从它声明开始，直到程序结束；
一个局部变量的生存期从它被声明开始，知道包含它的最近的一个程序块结束

作用域是指变量名可以代表该变量存储空间的范围


一般情况下，变量的作用域与其生存期一致，但由于c++允许在程序的不同
部分为不同变量取同一个名字，因此一个变量名的作用域可能小于其生存期


3.变量的存储类属性


1.auto变量：用关键字auto声明的局部变量称为自动变量。auto为变量声明
时的默认存储类别，即在变量定义时，如果不显式标明存储类别，则系统自动按
auto变量处理。auto变量所占用存储空间的分配和释放工作将由系统自动完成

2.register变量：用关键字register声明的局部变量称为寄存器变量

register变量可能以寄存器作为其存储空间。
声明寄存器变量时，关键字register的作用只能是建议(而不是强制)
系统使用寄存器，当寄存器不够用时，该变量仍然按自动变量处理

3. static变量：用关键字static声明的变量称为静态变量。任何静态变量的
生存期将延续到整个程序的终止。与全局变量一样，为静态变量分配的存储空间
在整个程序运行过程中不再被释放；如果静态变量未被赋予初值，
系统将自动为其赋予初值0

4.extern变量：用关键字extern声明的变量称为外部变量。变量一旦被声明
为外部变量，系统就不必像一般变量那样为其分配内存，因为该变量已经在
这一局部的外面被定义。
外部变量一般用于多个文件组成的程序中，有些变量在多个文件中被声明，
但却是指同一个变量。标明某一个变量为外部变量可以避免为其重复分配内存


4.typeof 类型说明

使用关键字 typeof可以为已有类型名定义一个新类型名

typeof 已有类型名   新类型名

typeof 只是为某个已有的数据类型起了一个别名。在规模较大的程序中
为了提高代码可读性场采用这种方式

2.3.3 符号常量声明语句





符号常量在使用之前必须先进行定义。符号常量定义语句同变量定义语句类似，其语法格式

const <类型名><符号常量名>=<初值表达式>

其中，关键字const指明这是一条符号常量定义语句，后面跟着符号常量的类型名，接着
是符号常量名，它是一个用户定义的标识符，符号常量名之后为一个赋值和一个初值表达式。
必须在声明符号常量的同事为其显示赋初值。该语句也可以定义多个符号常量

系统执行符号常量定义语句时，需要依次为每个符号常量分配存储单元并赋初值。
一个符号常量定义后，它的值就是定义时所赋予的初值，作为常量，这个值以后
将始终保持不变，因为系统只允许读取它的值，而不允许再次向它赋值。
另外，在符号常量定义语句中，若<类型名>为int,则int可以胜利


c++关键字中的true和false就是系统预先定义的两个符号常量，它们的值分别为1和0

使用符号常量往往可以提高程序的可读性和可维护性。由于符号常量和变量同样要求
系统为其分配内存单元，所以可以把符号常量视为一种不允许赋值改变的或只读不写的变量，
称为const变量


2.4  运算符和表达式


c++语言中的运算符又称为操作符，是用来对数据进行运算的符号，运算中所需要的数据称为操作数或运算分量。由一个或多个操作数于操作符连接而成的有效运算符称为表达式。
表达式还能以运算分量的角色出现在运算中从而组成新的表达式。
任何表达式都有一个运算结果


c++语言中的运算符可以根据其运算分量个数的多少分为单目(或一元)运算符，
双目(或二元)运算符，三目(或三元)运算符3lei
一般情况下，单目运算符位于运算分量之前，例如要对某个变量x取相反数可以表示为-x,
这里的"-"符号就是一个单目运算符，用在x的前面；双目运算符一般位于两个运算分量之间，
例如把两个数a和b相加可以表示为a+b,位于a和b中的"+"号就是双目运算符；三目运算符只有一个，
即为条件运算符"?:",它由两个字符组成，可以把3个运算分量分隔开


运算符可能是一个字符，也可能由两个或三个字符组成，还有一些运算符是c++关键字。

例如，加号(+)就是一个字符，逻辑与(&&)就是两个字符，左移赋值号(<<=)就是三个字符，
测类型长度运算符(sizeof)就是一个c++的关键字


2.4.2  运算类型于运算符

每一种运算符与其他运算的区别有3个：
1.参加运算的运算分量的数量和类型
2.运算结果的数据类型
3.运算的具体操作


"*"一般是作为乘法运算符，同时，它还是单目的取值运算(用于指针类型)的运算符。
同一类运算可以组成一种运算类型，凡是具有相同运算分量和结果类型的运算划分
为同一类运算

2.4.3 赋值运算


<变量名>=<表达式>

注意，当把一个实数值赋给一个整数量时，将丢失小数部分，获得的只是整数部分，它是数组的一个近似值

在一个赋值表达式中可以使用多个赋值号实现多个变量赋值的功能

赋值号也可以使用在常量和变量的声明语句中，用于给符号常量和变量赋初值
注意，赋值号只起到赋初值的作用，不构成赋值表达式

2.4.4  算术运算符和算术表达式

算术运算是指int型，float型，double型(称为char型)的数值类数据计算后，
得到同一类型数据的运算。算术运算中所使用的运算符称为算术运算符


前缀增量和后缀增量的区别，
x++表示，先令x加1，然后再参加其他运算
++x表示，先令x参加其他运算，然后再令x加1

x初值10

++x 表示增1的x值，即11
x++ 表示


1.当参加运算的两个运算分量均为整型时(但具体类型可以不同，比如，一个为int，一个为char)
则运算结果为int

2.当参加运算的两个运算分量中至少有一个单精度型，并且另一个不是双精度型，
增运算结果为float型

3. 当参加运算的两个运算分量中至少有一个是双精度型，则运算结果为双精度型


若干要使用两个整数相除得到一个实数，则必须将其中之一强制转换为实数


2.4.5  关系运算符和关系表达式


< <= > >= == !==

<运算分量><关系运算符><运算分量>


2.4.6  逻辑运算符和逻辑表达式


!(逻辑非)  &&(逻辑与)   ||(逻辑或)


<逻辑运算符!><运算分量>

<运算分量><逻辑运算符 && 或 ||><运算分量>


2.4.7  位运算


c++提供了6种位运算

双目位运算符:  &(按位与)  |(按位或)   ^(按位异或)    >>(按位右移)    <<(按位左移)
单目位运算符:  ~(按位取反)



<运算分量><双目运算符><运算分量>
<单目运算符><运算分量>

2.4.8  其他运算


1.条件运算符


条件运算是c++中唯一的三目运算，与其对应的运算符?:称为条件运算符

<表达式1>?<表达式2>:<表达式3>


当计算由条件运算符构成的表达式时，首先计算<表达式1>,若其值非0，则计算出<表达式2>的值，
并用这个值作为整个表达式的值；若<表达式1>的值为0，则计算出<表达式3>的值，
并用这个值作为整个表达式的值


2.逗号运算符


c++中使用逗号运算符指明对多个表达式进行顺序求值。
<表达式1>,<表达式2>,....<表达式n>

3.sizeof 运算符


使用运算符sizeof可以进行字长提取操作，因此sizeof运算符又称为字长提取符，它的使用格式为：

sizeof(<运算分量>)

其中，sizeof为关键字，<运算分量>既可以是一个类型名，也可以是一个变量名

字长提起运算的结果为一个整数，该整数表示指定的类型或变量的字节长度，即在内存中占用的字节(Byte)数

4.圆括号运算符

c++中不仅将圆括号() 归为运算符，而且根据不同的使用方式，可以对圆括号运算符的功能有3个解释

（1）圆括号用于函数调用，格式为
<函数名>(<实参数>)

圆括号运算符跟在函数名的后面，表示进行函数调用；圆括号中是函数的实际参数列表

比如  ， sqrt(2)
（2）圆括号用于强制类型转换。格式为

(<类型名>)<表达式>

int a =6

(float)a



（3）圆括号用于类型构造，格式为


<类型名>(<表达式>)

类型构造是使用圆括号中<表达式>的值构造一个具有目标数据类型的值，要构造的目标数据类型由
<类型名>指定

比如，double d = 3.6;
int n = int(d);

类型构造在功能上等价于强制类型转换

<类型名>也可以是用户定义数据类型(如类类型)，用户定义数据类型的默认值由该类型的
构造函数给出。
除此之外，考虑到内容的先后顺序，

(1)数组下标运算符：[](下标)
(2)指针运算符：*(取地址)和&(值引用)
(3) 动态存储分配运算符：new(分配)和delete(释放)
(4)作用域限定运算符:::(类域或全局域)


2.4.9  优先级和结合性


1.优先计算带有括号的子表达式
2.在没有括号的部分，依照运算符优先级，由高到低进行计算
3.具有相同优先级的运算符，按照结合性规定，依次进行计算


1.::
2. .  -> []  ()  ()  ++ --
3. sizeof sizeof  ++ -- ~ ! - + & * new delete delete ()
4. .* ->*
5. *  / %
6. + -
7.  << >>
8.  < <= > =>
9. ==  !=
10. &
11. ^
12. |
13. &&
14. ||
15. ?:
16 = *= /= %= += -=  <<= >>= &= |= ^=
17. ,


第3章  基本控制结构


在程序设计语言中控制结构用于指明程序的执行流程。c++语言提供的基本控制结构包括3种：

1.顺序结构： 按照先后顺序依次执行程序中的语句
2.选额结构：按照给定条件有选择地执行程序中的语句
3. 循环结构：按照给定规则重复地执行程序中的语句


3.1 c++语句

语句是c++程序中的基本功能单元。任何一条c++语句都会为完成某项任务而进行相关操作。

c++语句通常以分号作为结束标志。

c++语句按照不同功能大体分为6中类型
1.声明语句：用于对程序中的各种实体进行声明，定义及初始化
2.表达式语句：用于对程序中的数据进行具体操作和处理
3.选择语句：用于实现程序的选择结构
4.循环语句：用于实现程序的循环结构
5.跳转语句：用于实现程序执行流程的转移
6.复合语句：用于表示程序中的语句块

c++中并不存在赋值语句和函数调用语句，赋值和函数调用都属于表达式而不是语句


3.2 顺序结构

顺序结构是c++程序中执行流程的默认结构。在一个没有选择和循环结构的程序中，语句将按照书写
先后顺序，从左向右，从上而下依次执行。
